# Generated by Django 5.2.1 on 2025-05-28 19:34

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AdminActivity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('model_name', models.CharField(blank=True, max_length=50)),
                ('object_id', models.CharField(blank=True, max_length=100)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('admin_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admin_activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Admin Activity',
                'verbose_name_plural': 'Admin Activities',
                'db_table': 'admin_activities',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='SiteSettings',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('site_name', models.CharField(default='Mentora Learning Platform', max_length=100)),
                ('site_description', models.TextField(default='Empowering underprivileged learners through quality education')),
                ('site_logo', models.ImageField(blank=True, null=True, upload_to='site/')),
                ('site_favicon', models.ImageField(blank=True, null=True, upload_to='site/')),
                ('contact_email', models.EmailField(default='info@mentora.edu.gh', max_length=254)),
                ('contact_phone', models.CharField(blank=True, max_length=20)),
                ('contact_address', models.TextField(blank=True)),
                ('minimum_pass_percentage', models.PositiveIntegerField(default=60, help_text='Minimum percentage required to pass quizzes and tests', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('quiz_questions_per_topic', models.PositiveIntegerField(default=10, help_text='Default number of questions per quiz', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50)])),
                ('quiz_time_limit', models.PositiveIntegerField(default=300, help_text='Default quiz time limit in seconds', validators=[django.core.validators.MinValueValidator(60), django.core.validators.MaxValueValidator(3600)])),
                ('question_time_limit', models.PositiveIntegerField(default=45, help_text='Default time limit per question in seconds', validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(300)])),
                ('explanation_display_time', models.PositiveIntegerField(default=5, help_text='Time to display explanation after each question in seconds', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(30)])),
                ('test_questions_per_topic', models.PositiveIntegerField(default=20, help_text='Default number of questions per test', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('test_time_limit', models.PositiveIntegerField(default=1800, help_text='Default test time limit in seconds', validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(7200)])),
                ('exam_questions_per_level', models.PositiveIntegerField(default=30, help_text='Default number of questions per level exam', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(200)])),
                ('exam_time_limit', models.PositiveIntegerField(default=3600, help_text='Default exam time limit in seconds', validators=[django.core.validators.MinValueValidator(600), django.core.validators.MaxValueValidator(14400)])),
                ('require_all_subjects_completion', models.BooleanField(default=True, help_text='Require completion of all subjects in a level before promotion')),
                ('allow_retakes', models.BooleanField(default=True, help_text='Allow users to retake quizzes and tests')),
                ('max_retake_attempts', models.PositiveIntegerField(default=3, help_text='Maximum number of retake attempts allowed', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('enable_email_notifications', models.BooleanField(default=True, help_text='Enable email notifications for users')),
                ('email_verification_required', models.BooleanField(default=True, help_text='Require email verification for new users')),
                ('allow_file_uploads', models.BooleanField(default=True, help_text='Allow file uploads for study materials')),
                ('max_file_size_mb', models.PositiveIntegerField(default=10, help_text='Maximum file size for uploads in MB', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('allowed_file_types', models.TextField(default='pdf,doc,docx,txt,jpg,jpeg,png,gif', help_text='Comma-separated list of allowed file extensions')),
                ('maintenance_mode', models.BooleanField(default=False, help_text='Enable maintenance mode to restrict access')),
                ('maintenance_message', models.TextField(default='The site is currently under maintenance. Please check back later.', help_text='Message to display during maintenance')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='settings_updates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Site Settings',
                'verbose_name_plural': 'Site Settings',
                'db_table': 'site_settings',
            },
        ),
    ]
